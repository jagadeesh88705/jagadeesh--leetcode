class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
         int dp[][]=new int[text1.length()+1][text2.length()+1];
        for(int i=0;i<=text1.length();i++){
            for(int j=0;j<=text2.length();j++){
                dp[i][j]=-1;
            }
        }
        return lcs(text1,text2,text1.length(),text2.length(),dp);

        
    }
     static  int lcs(String ch1,String ch2,int m,int n,int[][] dp){
        if((m==0)||(n==0))
            return 0;
        if(dp[m][n]!=-1)
            return dp[m][n];
        if(ch1.charAt(m-1)==ch2.charAt(n-1)){
            dp[m][n]=1+lcs(ch1,ch2,m-1,n-1,dp);
            return dp[m][n];           
        }
        else{
            int ans1=lcs(ch1,ch2,m-1,n,dp);
            int ans2=lcs(ch1,ch2,m,n-1,dp);
            dp[m][n]=Math.max(ans1,ans2);
            return dp[m][n];
        }
    }
}
